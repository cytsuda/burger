{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","validationError","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","a","createElement","className","ValidationError","push","Invalid","elementType","Object","assign","join","onChange","changed","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLenght","isSignUp","inputChangedHandler","event","controlName","updateControls","updatedObject","_this","C_Users_cyt23_Desktop_Projetos_react_course_burguer_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buidingBurguer","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burguerBuilder","building","dispatch","isSignup","actions"],"mappings":"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","file":"static/js/4.a6ae917b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport classes from \"./Input.module.css\"\n\nconst input = (props) => {\n   let inputElement = null;\n   const inputClasses = [classes.InputElement]\n   let validationError;\n\n   if(props.invalid && props.shouldValidate && props.touched){\n      validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n      inputClasses.push(classes.Invalid);\n   }\n\n   switch (props.elementType){\n      case (\"input\"):\n         inputElement = <input \n            className={inputClasses.join(\" \")} \n            onChange={props.changed}\n            {...props.elementConfig} \n            value={props.value}/>;\n         break;\n      case (\"textArea\"):\n         inputElement = <textarea \n            className={inputClasses.join(\" \")} \n            onChange={props.changed}\n            {...props.elementConfig}\n            value={props.value}/>;\n         break;\n      case (\"select\"):\n         inputElement = (\n         <select \n            className={inputClasses.join(\" \")}\n            onChange={props.changed}\n            value={props.value}>\n            {props.elementConfig.options.map(option =>(\n               <option key={option.value} value={option.value}>{option.displayValue}</option>\n            ))}\n         </select>\n         );\n         break;\n      default:\n         inputElement = <input \n            className={inputClasses.join(\" \")} \n            onChange={props.changed}\n            {...props.elementConfig} \n            value={props.value}/>;\n   }\n\n   return (\n      <div className={classes.Input}>\n         <label className={classes.Label}>{props.label}</label>\n         {inputElement}\n         {validationError}\n      </div>\n   );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__28_fr\",\"Label\":\"Input_Label__1ieAo\",\"InputElement\":\"Input_InputElement__3jzb8\",\"Invalid\":\"Input_Invalid__3_x-6\",\"ValidationError\":\"Input_ValidationError___tsqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3QBn6\"};","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {updatedObject,checkValidity } from '../../shared/utility';\n\nimport * as actions from '../../store/actions/index';\n\nimport classes from \"./Auth.module.css\";\n\n\nclass Auth extends Component {\n  state = {\n    controls:{\n      email: {\n        elementType:\"input\",\n        elementConfig: {\n            type: \"email\",\n            placeholder:\"Mail Address\"\n        },\n        value: \"\",\n        validation: {\n            required:true,\n            isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType:\"input\",\n        elementConfig: {\n            type: \"password\",\n            placeholder:\"Password\"\n        },\n        value: \"\",\n        validation: {\n            required:true,\n            minLenght: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignUp:true\n  }\n  componentDidMount(){\n    if(!this.props.buidingBurguer && this.props.authRedirectPath!=='/'){\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n  \n  inputChangedHandler=(event,controlName)=>{\n    const updateControls = updatedObject(this.state.controls,{\n      [controlName]: updatedObject(this.state.controls[controlName],{\n        value:event.target.value,\n        valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls:updateControls});\n  }\n  submitHandler = (event) =>{\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n  switchAuthModeHandler = ( ) => {\n    this.setState(prevState=>{\n      return { isSignUp: !prevState.isSignUp }\n    });\n  }\n  render(){\n    const formElementsArray = [];\n    for (let key in this.state.controls){\n        formElementsArray.push({\n          id:key,\n          config:this.state.controls[key]\n        });\n    }\n    let form = formElementsArray.map(formElement=>(\n      <Input \n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched = {formElement.config.touched}\n        changed={(event)=>this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n    if(this.props.loading){\n      form = <Spinner/>\n    }\n    let errorMessage = this.props.error ? <p>{this.props.error.message}</p> : null;\n    let authRedirect = null;\n    if(this.props.isAuthenticated){\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>\n    }\n    return(\n      <div className={classes.Auth}>\n        {authRedirect}\n        <h1>{!this.state.isSignUp ? 'Login':'Register'}</h1>\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\"> {!this.state.isSignUp ? 'Login':'Register'}</Button>\n        </form>\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>Switch to {this.state.isSignUp ? 'Sign In':'Sign Up'}</Button>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state =>{\n  return{\n    loading:state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buidingBurguer: state.burguerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n};\nconst mapDispatchToProps = dispatch =>{\n  return{\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')) \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}